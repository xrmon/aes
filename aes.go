package aes

// Sbox generated by code in sbox.c
var sbox = [256]byte{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x1, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x4, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x5, 0x9a, 0x7, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x9, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x2, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0xc, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0xb, 0xdb, 0xe0, 0x32, 0x3a, 0xa, 0x49, 0x6, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x8, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x3, 0xf6, 0xe, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0xd, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0xf, 0xb0, 0x54, 0xbb, 0x16}

func AddRoundKey(state [16]byte, roundKey [16]byte) (newState [16]byte) {
	for i, key := range roundKey {
		newState[i] = key ^ state[i]
	}
	return
}

func SubBytes(state [16]byte) (newState [16]byte) {
	for i, v := range state {
		newState[i] = sbox[v]
	}
	return
}

func ShiftRows(state [16]byte) (newState [16]byte) {
	// Shift first row by 0
	newState[0]  = state[0]
	newState[4]  = state[4]
	newState[8]  = state[8]
	newState[12] = state[12]
	// Shift second row by 1
	newState[1]  = state[5]
	newState[5]  = state[9]
	newState[9]  = state[13]
	newState[13] = state[1]
	// Shift third row by 2
	newState[2]  = state[10]
    newState[6]  = state[14]
    newState[10] = state[2]
    newState[14] = state[6]
    // Shift fourth row by 3
    newState[3]  = state[15]
    newState[7]  = state[3]
    newState[11] = state[7]
    newState[15] = state[11]
    return
}

func mixColumn(col [4]byte) [4]byte {
    // Inputs
    var a, b, c, d byte = col[0], col[1], col[2], col[3]
    // Outputs
    var A, B, C, D byte
    A = GaloisMultiply(2, a) ^ GaloisMultiply(3, b) ^ c ^ d
    B = a ^ GaloisMultiply(2, b) ^ GaloisMultiply(3, c) ^ d
    C = a ^ b ^ GaloisMultiply(2, c) ^ GaloisMultiply(3, d)
    D = GaloisMultiply(3, a) ^ b ^ c ^ GaloisMultiply(2, d)
    // Repack into array
    result := [4]byte{A, B, C, D}
    return result
}

func MixColumns(state [16]byte) [16]byte {
    var col1, col2, col3, col4 [4]byte
    // Extract columns from state
    copy(col1[:], state[0:4])
    copy(col2[:], state[4:8])
    copy(col3[:], state[8:12])
    copy(col4[:], state[12:16])
    // Process each column
    col1 = mixColumn(col1)
    col2 = mixColumn(col2)
    col3 = mixColumn(col3)
    col4 = mixColumn(col4)
    // Create new array
    var result [16]byte
    copy(result[0:4], col1[:])
    copy(result[4:8], col2[:])
    copy(result[8:12], col3[:])
    copy(result[12:16], col4[:])
    return result
}

func BlockEncrypt(input [16]byte, rounds int, roundKeys [][16]byte) [16]byte {
    var state [16]byte
    // Initial round key
    state = AddRoundKey(input, roundKeys[0])
    // Rounds 1 to N-1
    for i := 1; i < rounds; i++ {

        state = SubBytes(state)
        state = ShiftRows(state)
        state = MixColumns(state)
        state = AddRoundKey(state, roundKeys[i])

    }
    // Final round
    state = SubBytes(state)
    state = ShiftRows(state)
    state = AddRoundKey(state, roundKeys[rounds])
    return state
}

func BlockEncrypt128(input [16]byte, key [16]byte) [16]byte {
    var roundKeys [11][16]byte = ExpandKey128(key)
    return BlockEncrypt(input, 10, roundKeys[:])
}

func BlockEncrypt192(input [16]byte, key [24]byte) [16]byte {
    var roundKeys [13][16]byte = ExpandKey192(key)
    return BlockEncrypt(input, 12, roundKeys[:])
}

func BlockEncrypt256(input [16]byte, key [32]byte) [16]byte {
    var roundKeys [15][16]byte = ExpandKey256(key)
    return BlockEncrypt(input, 14, roundKeys[:])
}

func BlockEncryptX(input [16]byte, key[16]byte, rounds int) [16]byte {
    /* Encrypts an abitrary number of rounds on a 128-bit key */
    roundKeys := KeyExpansion(key[:], 4, rounds+1)
    return BlockEncrypt(input, rounds, roundKeys)
}
